{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "DynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "partition-key",
            "AttributeType" : "S",
          },
          {
            "AttributeName" : "sort-key",
            "AttributeType" : "S",
          },
        ],
        "KeySchema" : [
          {
            "AttributeName" : "partition-key",
            "KeyType" : "HASH",
          },
          {
            "AttributeName" : "sort-key",
            "KeyType" : "RANGE",
          },
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "5",
        },
        "TableName" : "TABLE_NAME_SUB",
      }
    },

    "EC2InstanceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "RoleName" : "EC2_INSTANCE_ROLE_SUB",
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service": "ec2.amazonaws.com" },
            "Action" : "sts:AssumeRole"
          }] 
        },
        "Path" : "/",
        "Policies" : [{
          "PolicyName": "CodeDeployEC2Policy",
          "PolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "arn:aws:logs:us-east-1:AWS_ACCOUNT_SUB:log-group:*"
              ],
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:*",
                "codedeploy:*",
                "ec2:*",
                "iam:AddRoleToInstanceProfile",
                "iam:CreateInstanceProfile",
                "iam:CreateRole",
                "iam:DeleteInstanceProfile",
                "iam:DeleteRole",
                "iam:DeleteRolePolicy",
                "iam:GetRole",
                "iam:PassRole",
                "iam:PutRolePolicy",
                "iam:RemoveRoleFromInstanceProfile"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },    
    "EC2InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Roles" : [ !Ref EC2InstanceRole ]
      },
    },

    "LaunchConfiguration" : {
      "ResourceType": "AWS::AutoScaling::LaunchConfiguration", 
      "Properties" : {
        "AssociatePublicIpAddress" : true,
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/xvdcz", 
          "Ebs": {
            "VolumeSize": 22, 
            "VolumeType": "gp2"
          }
        }], 
        "ClassicLinkVPCSecurityGroups" : [],
        "EbsOptimized" : false,
        "IamInstanceProfile": !Ref EC2InstanceProfile, 
        "ImageId" : "AMI_SUB",
        "InstanceMonitoring": { "Enabled": true }, 
        "InstanceType" : "t2.micro",
        "KeyName" : "KEY_NAME_SUB",
        "SecurityGroups" : [ !Ref SecurityGroup ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash\n",
              "echo ECS_CLUSTER=microEcsInstnace >> /etc/ecs/ecs.config\n",

              "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py",
              " || error_exit 'Failed to download AWS Logs Agent.'\n",

              "wget https://s3.amazonaws.com/aws-codedeploy-REGION_SUB/cloudwatch/codedeploy_logs.conf",
              " || error_exit 'Failed to download CodeDeploy Logs conf.'\n",

              "chmod +x ./awslogs-agent-setup.py\n",

              "python awslogs-agent-setup.py -n -r REGION_SUB -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf",
              " || error_exit 'Failed run awslogs-agent-setup.py.'\n",

              "mkdir -p /var/awslogs/etc/config\n",
              "cp codedeploy_logs.conf /var/awslogs/etc/config/\n",
              "service awslogs restart\n",
            ]]
          }
        },
      }
    },
    "AutoScalingGroup" : {
      "ResourceType": "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "TargetGroupARNs" : [],
        "DesiredCapacity" : 1,
        "Tags" : [{
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "This instance is the part of the Auto Scaling group which was created through ECS Console", 
          "Key": "Description"
        }, 
        {
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "ECS Instance - EC2ContainerService-microEcsInstnace", 
          "Key": "Name"
        }, 
        {
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "EcsInstanceAsg", 
          "Key": "aws:cloudformation:logical-id"
        }, 
        {
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "arn:aws:cloudformation:us-east-1:545654232789:stack/EC2ContainerService-microEcsInstnace/23e42500-e617-11e7-b088-503acac41e61", 
          "Key": "aws:cloudformation:stack-id"
        }, 
        {
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "EC2ContainerService-microEcsInstnace", 
          "Key": "aws:cloudformation:stack-name"
        }],
        "LoadBalancerNames" : [],
        "Cooldown" : 300,
        "MinSize" : 0,
        "MaxSize" : 1,
        "VPCZoneIdentifier" : [ "subnet-7a8a5255" ]
        "HealthCheckGracePeriod" : 0,
        "HealthCheckType" : "EC2",
        "TerminationPolicies" : [ "Default" ],
        "LaunchConfigurationName" : !Ref LaunchConfiguration,
      }
    }, 
    
    "ECSCluster" : {
      "Type" : "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : "ECS_CLUSTER_SUB"
      }
    },
    "ECSTaskDefitinition" : {
      "Type" : "AWS::ECS::TaskDefinition",
      "Properties" : {
        "Volumes" : [],
        "Family" : "TASK_DEFINITION_SUB",
        "PlacementConstraints" : [],
        "ContainerDefinitions" : [{
          "dnsSearchDomains": [], 
          "environment": [], 
          "readonlyRootFilesystem": false, 
          "name": "caddy", 
          "links": [], 
          "mountPoints": [], 
          "image": "IMAGE_SUB", 
          "linuxParameters": {
            "capabilities": {}
          }, 
          "essential": true, 
          "portMappings": [{
            "protocol": "tcp", 
            "containerPort": 5000, 
            "hostPort": 5000
          }], 
          "dnsServers": [], 
          "dockerSecurityOptions": [], 
          "entryPoint": [], 
          "ulimits": [], 
          "privileged": false, 
          "memory": 150, 
          "command": [], 
          "extraHosts": [], 
          "cpu": 0, 
          "volumesFrom": [], 
          "dockerLabels": {}
        }]
      }
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
       "Properties" : {
         "GroupName" : "SECURITY_GROUP_SUB",
         "GroupDescription" : "Doing if for each instance, could create one apart to reuse",
         "SecurityGroupIngress" : [{
           "IpProtocol" : "tcp",
           "FromPort" : "80",
           "ToPort" : "80",
           "CidrIp" : "0.0.0.0/0",
         },
         {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp" : "0.0.0.0/0",
         }],
       }
    },
  }
}
