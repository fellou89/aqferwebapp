{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "DynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "partition-key",
            "AttributeType" : "S",
          },
          {
            "AttributeName" : "sort-key",
            "AttributeType" : "S",
          },
        ],
        "KeySchema" : [
          {
            "AttributeName" : "partition-key",
            "KeyType" : "HASH",
          },
          {
            "AttributeName" : "sort-key",
            "KeyType" : "RANGE",
          },
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "5",
        },
        "TableName" : "DYNAMO_TABLE_SUB",
      }
    },

    "EC2InstanceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "RoleName" : "EC2_INSTANCE_ROLE_SUB",
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service": "ec2.amazonaws.com" },
            "Action" : "sts:AssumeRole"
          }] 
        },
        "Path" : "/",
        "Policies" : [{
          "PolicyName": "ECSPolicy",
          "PolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "arn:aws:logs:us-east-1:AWS_ACCOUNT_SUB:log-group:*"
              ],
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:*",
                "codedeploy:*",
                "ec2:*",
                "ecs:*",
                "ecr:*",
                "iam:AddRoleToInstanceProfile",
                "iam:CreateInstanceProfile",
                "iam:CreateRole",
                "iam:DeleteInstanceProfile",
                "iam:DeleteRole",
                "iam:DeleteRolePolicy",
                "iam:GetRole",
                "iam:PassRole",
                "iam:PutRolePolicy",
                "iam:RemoveRoleFromInstanceProfile"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },    
    "EC2InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Roles" : [ !Ref EC2InstanceRole ]
      },
    },

    "LaunchConfiguration" : {
      "Type": "AWS::AutoScaling::LaunchConfiguration", 
      "Metadata" : {
        "AWS::CloudFormation::Init": {
          "configSets" : {
            "default" : [ "runtask" ]
          },
          "runtask" : {
            "commands" : {
              "c" : { "command" : "service awslogs restart" },
              "d" : { "command" : "sudo service docker restart" },
              "e" : { "command" : "sudo start ecs" },
              "f" : { "command" : "aws ecs run-task --cluster ECS_CLUSTER_SUB --task-definition TASK_DEFINITION_SUB --region REGION_SUB" },
            }
          }
        }
      },
      "Properties" : {
        "AssociatePublicIpAddress" : true,
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/xvdcz", 
          "Ebs": {
            "VolumeSize": 22, 
            "VolumeType": "gp2"
          }
        }], 
        "EbsOptimized" : false,
        "IamInstanceProfile": !Ref EC2InstanceProfile, 
        "ImageId" : "AMI_SUB",
        "InstanceType" : "t2.micro",
        "KeyName" : "KEY_NAME_SUB",
        "SecurityGroups" : [ !Ref SecurityGroup ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash\n",
              "sudo yum install -y ecs-init\n",

              "echo ECS_CLUSTER=ECS_CLUSTER_SUB >> /etc/ecs/ecs.config\n",
              "echo ECS_LOGLEVEL=debug >> /etc/ecs/ecs.config\n",
              "echo ECS_AVAILABLE_LOGGING_DRIVERS='[\"awslogs\"]' >> /etc/ecs/ecs.config\n",

              "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n",
              "yum -y install aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n",

              "function error_exit {\n",
              "  /opt/aws/bin/cfn-signal -e 1 --reason \"$1\" --stack ", { "Ref" : "AWS::StackName" }, " --resource LaunchConfiguration --region REGION_SUB\n",
              "  exit 1\n",
              "}\n",

              "echo [/var/log/ecs/ecs-agent.log] >> /ecs_logs.conf\n",
              "echo file = /var/log/ecs/ecs-agent.log.* >> /ecs_logs.conf\n",
              "echo log_group_name = /var/log/ecs/ecs-agent.log >> /ecs_logs.conf\n",
              "echo log_stream_name = ECS_CLUSTER_SUB/INSTANCE_ID >> /ecs_logs.conf\n",

              "/opt/aws/bin/ec2-metadata -i | sed 's/instance-id: //' >> /instance_id\n",
              "cat /ecs_logs.conf | sed 's/INSTANCE_ID/'$(cat /instance_id)'/' > /ecs_logs.conf\n",
              "mkdir -p /var/awslogs/etc/config\n",
              "ln -s /ecs_logs.conf /var/awslogs/etc/config/ecs_logs.conf\n",

              "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py",
              " || error_exit 'Failed to download AWS Logs Agent.'\n",
              "chmod +x ./awslogs-agent-setup.py\n",

              "python awslogs-agent-setup.py -n -r REGION_SUB -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf",
              " || error_exit 'Failed run awslogs-agent-setup.py.'\n",

              "/opt/aws/bin/cfn-signal -e 0 --reason \"AWS ECS Agent setup complete.\" --stack ", { "Ref" : "AWS::StackName" }, " --resource LaunchConfiguration --region REGION_SUB\n",
              "/opt/aws/bin/cfn-init --stack ", { "Ref" : "AWS::StackName" }, " --resource LaunchConfiguration --region REGION_SUB\n",
            ]]
          }
        },
      }
    },
    "AutoScalingGroup" : {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "TargetGroupARNs" : [],
        "DesiredCapacity" : 1,
        "Tags" : [{
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "This instance is the part of the Auto Scaling group which was created through ECS Console", 
          "Key": "Description"
        }, 
        {
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "ECS Instance - EC2ContainerService-microEcsInstnace", 
          "Key": "Name"
        }, 
        {
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "EcsInstanceAsg", 
          "Key": "aws:cloudformation:logical-id"
        }, 
        {
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "arn:aws:cloudformation:us-east-1:545654232789:stack/EC2ContainerService-microEcsInstnace/23e42500-e617-11e7-b088-503acac41e61", 
          "Key": "aws:cloudformation:stack-id"
        }, 
        {
          "ResourceType": "auto-scaling-group", 
          "ResourceId": "EC2ContainerService-microEcsInstnace-EcsInstanceAsg-NQYSFPXY0XNZ", 
          "PropagateAtLaunch": true, 
          "Value": "EC2ContainerService-microEcsInstnace", 
          "Key": "aws:cloudformation:stack-name"
        }],
        "LoadBalancerNames" : [],
        "Cooldown" : 300,
        "MinSize" : 0,
        "MaxSize" : 1,
        "VPCZoneIdentifier" : [ "subnet-7a8a5255" ],
        "HealthCheckGracePeriod" : 0,
        "HealthCheckType" : "EC2",
        "TerminationPolicies" : [ "Default" ],
        "LaunchConfigurationName" : !Ref LaunchConfiguration,
      }
    }, 
    
    "ECSCluster" : {
      "Type" : "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : "ECS_CLUSTER_SUB"
      }
    },
    "ECSTaskDefitinition" : {
      "Type" : "AWS::ECS::TaskDefinition",
      "Properties" : {
        "Volumes" : [],
        "Family" : "TASK_DEFINITION_SUB",
        "PlacementConstraints" : [],
        "ContainerDefinitions" : [{
          "DnsSearchDomains": [], 
          "Environment": [], 
          "ReadonlyRootFilesystem": false, 
          "Name": "caddy", 
          "Links": [], 
          "MountPoints": [], 
          "Image": "ECR_REPO_URI_SUB", 
          "LinuxParameters": {
            "Capabilities": {}
          }, 
          "Essential": true, 
          "PortMappings": [{
            "Protocol": "tcp", 
            "ContainerPort": 5000, 
            "HostPort": 5000
          }], 
          "DnsServers": [], 
          "DockerSecurityOptions": [], 
          "EntryPoint": [], 
          "Ulimits": [], 
          "Privileged": false, 
          "Memory": 300, 
          "Command": [], 
          "ExtraHosts": [], 
          "Cpu": 0, 
          "VolumesFrom": [], 
          "DockerLabels": {}
        }]
      }
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
       "Properties" : {
         "GroupName" : "SECURITY_GROUP_SUB",
         "GroupDescription" : "Doing if for each instance, could create one apart to reuse",
         "VpcId" : "vpc-f582e28d",
         "SecurityGroupIngress" : [{
           "IpProtocol" : "tcp",
           "FromPort" : "80",
           "ToPort" : "80",
           "CidrIp" : "0.0.0.0/0",
         },
         {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp" : "0.0.0.0/0",
         }],
       }
    },
  }
}
