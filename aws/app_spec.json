{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Simple CRUD web service. State is stored in a DynamoDB table.",
  "Resources": {
    "PipelineBucket": {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : "aqfer-cloudformation3",
        "VersioningConfiguration" : {
          "Status" : "Enabled"
        },
        "WebsiteConfiguration" : {
          "ErrorDocument" : "index.html",
          "IndexDocument" : "index.html",
        }
      }
    },
    "BucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : !Ref PipelineBucket,
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Sid" : "PublicReadForGetBucketObjects",
            "Effect" : "Allow",
            "Principal" : "*",
            "Action" : ["s3:GetObject"],
            "Resource" : { "Fn::Join" : ["", ["arn:aws:s3:::", !Ref PipelineBucket, "/*" ]] }
          }]
        }
      }
    },
    
    "DynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "partition-key",
            "AttributeType" : "S",
          },
          {
            "AttributeName" : "sort-key",
            "AttributeType" : "S",
          },
        ],
        "KeySchema" : [
          {
            "AttributeName" : "partition-key",
            "KeyType" : "HASH",
          },
          {
            "AttributeName" : "sort-key",
            "KeyType" : "RANGE",
          },
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "5",
        },
        "TableName" : "aqfer-idsync3",
      }
    },

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
      },
    },
    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.0.0/24",
      },
    },
    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
       "Properties" : {
         "GroupName" : "launch-wizard-3",
         "GroupDescription" : "Doing if for each instance, could create one apart to reuse",
         "VpcId": { "Ref": "VPC" },
         "SecurityGroupIngress" : [{
           "IpProtocol" : "tcp",
           "FromPort" : "22",
           "ToPort" : "22",
           "CidrIp" : "0.0.0.0/0",
         }],
         "SecurityGroupEgress" : [{
           "IpProtocol" : "tcp",
           "FromPort" : "80",
           "ToPort" : "80",
           "CidrIp" : "0.0.0.0/0",
         }],
       },
    },
    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : "ami-55ef662f",
        "InstanceType" : "t2.nano",
        "KeyName" : "AqferKeyPair",
        "NetworkInterfaces" : [{
          "DeviceIndex" : "0",
          "AssociatePublicIpAddress" : "true",
          "DeleteOnTermination" : "true",
          "SubnetId" : { "Ref" : "PublicSubnet" },
          "GroupSet" : [{ "Ref" : "SecurityGroup" }],
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/xvda",
          "Ebs": {
            "VolumeType": "gp2",
            "DeleteOnTermination": true,
            "VolumeSize": 8,
          },
        }],
      }
    },

    "CodeBuildServiceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "RoleName" : "aqferCodeBuildRole3",
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service": "codebuild.amazonaws.com" },
            "Action" : "sts:AssumeRole"
          }] 
        },
        "Path" : "/",
        "Policies" : [{
          "PolicyName": "CodeBuildPolicy",
          "PolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Resource": [
                "arn:aws:logs:us-east-1:545654232789:log-group:/aws/codebuild/aqferCodeBuild3",
                "arn:aws:logs:us-east-1:545654232789:log-group:/aws/codebuild/aqferCodeBuild3:*"
              ],
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": ["arn:aws:s3:::codepipeline-us-east-1-*"],
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:GetObjectVersion"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", !Ref PipelineBucket, "/aqferPipeline3/RawCode/*"]] },
              "Action": [
                "s3:GetObject",
                "s3:GetObjectVersion"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", !Ref PipelineBucket, "/*"]] },
              "Action": [
                "s3:PutObject",
              ]
            }]
          }
        }]
      }
    },
    "CodeBuild" : {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Name": "aqferCodeBuild3",
        "Description": "Code build project to prepare production caddy binary",
        "ServiceRole": !GetAtt CodeBuildServiceRole.Arn, 
        "Artifacts": {
          "NamespaceType": "NONE", 
          "Packaging": "NONE", 
          "Type": "S3", 
          "Location": !Ref PipelineBucket, 
          "Name": "CaddyZip"
        },
        "Environment": {
          "Type": "LINUX_CONTAINER", 
          "ComputeType": "BUILD_GENERAL1_SMALL", 
          "Image": "aws/codebuild/golang:1.7.3", 
          "EnvironmentVariables": []
        },
        "Source" : {
          "BuildSpec" : {
            "Fn::Join": [
              "\n", [
                "version: 0.2\n",
                "phases:",
                "  build:",
                "    commands:",
                "      - ls -la"
              ]
            ]
          },
          "Location" : { "Fn::Join" : ["", ["arn:aws:s3:::", !Ref PipelineBucket, "/aqferPipeline3/RawCode/*"]] },
          "Type" : "S3"
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodePipelineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "aqferCodepipelineRole3",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "codepipeline.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "CodePipelinePolicy",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "s3:GetObject",
                  "s3:GetObjectVersion",
                  "s3:GetBucketVersioning"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "s3:PutObject"
                ],
                "Resource": [
                  "arn:aws:s3:::codepipeline*",
                  "arn:aws:s3:::elasticbeanstalk*"
                ],
                "Effect": "Allow"
              },
              {
                "Action": [
                  "codecommit:CancelUploadArchive",
                  "codecommit:GetBranch",
                  "codecommit:GetCommit",
                  "codecommit:GetUploadArchiveStatus",
                  "codecommit:UploadArchive"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "codedeploy:CreateDeployment",
                  "codedeploy:GetApplicationRevision",
                  "codedeploy:GetDeployment",
                  "codedeploy:GetDeploymentConfig",
                  "codedeploy:RegisterApplicationRevision"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "elasticbeanstalk:*",
                  "ec2:*",
                  "elasticloadbalancing:*",
                  "autoscaling:*",
                  "cloudwatch:*",
                  "s3:*",
                  "sns:*",
                  "cloudformation:*",
                  "rds:*",
                  "sqs:*",
                  "ecs:*",
                  "iam:PassRole"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "lambda:InvokeFunction",
                  "lambda:ListFunctions"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "opsworks:CreateDeployment",
                  "opsworks:DescribeApps",
                  "opsworks:DescribeCommands",
                  "opsworks:DescribeDeployments",
                  "opsworks:DescribeInstances",
                  "opsworks:DescribeStacks",
                  "opsworks:UpdateApp",
                  "opsworks:UpdateStack"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "cloudformation:CreateStack",
                  "cloudformation:DeleteStack",
                  "cloudformation:DescribeStacks",
                  "cloudformation:UpdateStack",
                  "cloudformation:CreateChangeSet",
                  "cloudformation:DeleteChangeSet",
                  "cloudformation:DescribeChangeSet",
                  "cloudformation:ExecuteChangeSet",
                  "cloudformation:SetStackPolicy",
                  "cloudformation:ValidateTemplate",
                  "iam:PassRole"
                ],
                "Resource": "*",
                "Effect": "Allow"
              },
              {
                "Action": [
                  "codebuild:BatchGetBuilds",
                  "codebuild:StartBuild"
                ],
                "Resource": "*",
                "Effect": "Allow"
              }
            ],
            "Version": "2012-10-17"
          }
        }]
      }
    },
    "CodePipeline" : {
      "Type" : "AWS::CodePipeline::Pipeline",
      "Properties" : {
        "Name" : "aqferPipeline3",
        "RoleArn": !GetAtt CodePipelineRole.Arn, 
        "ArtifactStore" : {
          "Type": "S3",
          "Location": !Ref PipelineBucket,
        },
        "Stages" : [{
          "Name": "Source",
          "Actions": [{
            "InputArtifacts": [], 
            "Name": "Source",
            "ActionTypeId": {
              "Category": "Source",
              "Owner": "ThirdParty",
              "Version": "1",
              "Provider": "GitHub"
            },
            "OutputArtifacts": [{ "Name": "RawCode" }],
            "Configuration": {
              "Owner": "fellou89",
              "Repo": "aqferwebserver",
              "Branch": "master",
              "OAuthToken": "bfc246a4ec215d604f8235d60dbfc7b24a5450a5"
            },
            "RunOrder": 1
          }]
        },
        {
          "Name": "Build",
          "Actions": [{
            "InputArtifacts": [{ "Name" : "RawCode" }], 
            "Name": !Ref CodeBuild,
            "ActionTypeId": {
              "Category": "Build",
              "Owner": "AWS",
              "Version": "1",
              "Provider": "CodeBuild"
            },
            "OutputArtifacts": [{ "Name": "CaddyZip" }],
            "Configuration": {
              "ProjectName" : "aqferCodeBuild3",
            },
            "RunOrder": 1
          }]
        }]
      }
    }
  }
}
